/*
 * This source file was generated by the Gradle 'init' task
 */
package com.shippo;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import java.util.Properties;

import com.goshippo.shippo_sdk.Shippo;
import com.goshippo.shippo_sdk.models.components.*;
import com.goshippo.shippo_sdk.models.operations.*;

public class App {
    private static String getApiKey() {
        String rootPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();
        String appConfigPath = rootPath + "app.properties";

        String apiKey = null;
        Properties appProps = new Properties();
        try {
            appProps.load(new FileInputStream(appConfigPath));
            apiKey = appProps.getProperty("apiKey");     
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return apiKey;   
    }

    public static void main(String[] args) {
        Shippo sdk = Shippo.builder()
            .apiKeyHeader(getApiKey())
            .build();
        AddressCreateRequest fromAddress = AddressCreateRequest.builder()
            .name("Mr. Shippo")
            .street1("215 Clayton St.")
            .city("San Francisco")
            .state("CA")
            .zip("94117")
            .country("US")
            .phone("+1 555 341 9393")
            .email("test@gmail.com")
            .build();
        AddressCreateRequest toAddress = AddressCreateRequest.builder()
            .name("Mr. Demo")
            .street1("1092 Indian Summer Ct")
            .city("San Jose")
            .state("CA")
            .zip("95122")
            .country("US")
            .phone("+1 555 341 9393")
            .email("test@gmail.com")
            .build();
        ParcelCreateRequest parcel = ParcelCreateRequest.builder()
            .length("10")
            .width("5")
            .height("5")
            .distanceUnit(DistanceUnitEnum.IN)
            .weight("2")
            .massUnit(WeightUnitEnum.LB)
            .build(); 
              
        ShipmentCreateRequest shipmentCreateRequest = ShipmentCreateRequest.builder()
            .addressFrom(AddressFrom.of(fromAddress))
            .addressTo(AddressTo.of(toAddress))
            .parcels(Collections.singletonList(Parcels.of(parcel)))
            .build();

        CreateShipmentResponse createShipmentResponse = null;
        try {
            createShipmentResponse = sdk.shipments().create(shipmentCreateRequest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Shipment created successfully: " + createShipmentResponse.shipment().get().objectId());
  
        List<Rate> rates = createShipmentResponse.shipment().get().rates();

        for (Rate rate : rates) {
            System.out.println(rate.objectId() + " " + rate.provider() + " " + rate.servicelevel().name() + " " + rate.estimatedDays() + " " + rate.amountLocal() + " " + rate.currencyLocal());
        }

        // Select the first available rate for purchasing
        Rate lowestRate = null;
        if (!rates.isEmpty()) {
            lowestRate = rates.stream()
                .min((rate1, rate2) -> Double.compare(Double.parseDouble(rate1.amount()), Double.parseDouble(rate2.amount())))
                .orElseThrow(() -> new IllegalStateException("No rates available"));
        }
        
        TransactionCreateRequest createTransactionRequest = TransactionCreateRequest.builder()
            .rate(lowestRate.objectId())
            .labelFileType(LabelFileTypeEnum.PDF)
            .build();
        CreateTransactionResponse createTransactionResponse = null;
        try {
            createTransactionResponse = sdk.transactions().create(CreateTransactionRequestBody.of(createTransactionRequest));
        } 
        catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Transaction created successfully: " + createTransactionResponse.transaction().get().objectId());

        Transaction transaction = null;
        while (createTransactionResponse.transaction().get().status().get() != TransactionStatusEnum.SUCCESS) {
            try {
                Thread.sleep(1000);
                try {
                    GetTransactionResponse getTransactionResponse = sdk.transactions().get(createTransactionResponse.transaction().get().objectId().get());
                    if (getTransactionResponse.transaction().get().status().get() == TransactionStatusEnum.SUCCESS) {
                        transaction = getTransactionResponse.transaction().get();
                        break;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }    
        }

        try {
            String labelUrl = transaction.labelUrl().get();
            String userHome = System.getProperty("user.home");
            String downloadsPath = Paths.get(userHome, "Downloads", transaction.objectId().get() + ".pdf").toString();

            try (BufferedInputStream in = new BufferedInputStream(URI.create(labelUrl).toURL().openStream());
                 FileOutputStream fileOutputStream = new FileOutputStream(downloadsPath)) {
                byte[] dataBuffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = in.read(dataBuffer, 0, 1024)) != -1) {
                    fileOutputStream.write(dataBuffer, 0, bytesRead);
                }
            }
            System.out.println("Label downloaded successfully to: " + downloadsPath);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
